"""init 

Revision ID: fad0f485d72c
Revises: 048d629bc04f
Create Date: 2025-03-04 18:32:29.014177

"""
from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op
import time


# revision identifiers, used by Alembic.
revision: str = 'fad0f485d72c'
down_revision: Union[str, None] = '048d629bc04f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Print a clear message about what we're doing
    print("Starting init migration with explicit enum handling...")
    print("This migration assumes accounttype enum is created elsewhere")
    
    # Small delay to ensure previous operations are complete
    time.sleep(1)
    
    # Use explicit SQL to check if tables exist before creating them
    conn = op.get_bind()
    
    # Check if users table already exists
    has_users = conn.execute("""
    SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'users'
    );
    """).scalar()
    
    # Create tables only if they don't exist
    if not has_users:
        print("Creating users table...")
        op.create_table(
            'users',
            sa.Column('id', sa.Uuid(), nullable=False),
            sa.Column(
                'first_name', 
                sqlmodel.sql.sqltypes.AutoString(), 
                nullable=False
            ),
            sa.Column(
                'last_name', 
                sqlmodel.sql.sqltypes.AutoString(), 
                nullable=False
            ),
            sa.Column(
                'email', 
                sqlmodel.sql.sqltypes.AutoString(), 
                nullable=False
            ),
            sa.Column(
                'password', 
                sqlmodel.sql.sqltypes.AutoString(), 
                nullable=False
            ),
            # Explicitly use existing enum type without attempting to create it
            sa.Column(
                'account_type', 
                sa.Enum('AUTHOR', 'READER', name='accounttype', create_type=False), 
                nullable=False
            ),
            sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    else:
        print("Users table already exists, skipping creation")
    
    # Check if books table already exists
    has_books = conn.execute("""
    SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'books'
    );
    """).scalar()
    
    if not has_books:
        print("Creating books table...")
        op.create_table(
            'books',
            sa.Column('id', sa.Uuid(), nullable=False),
            sa.Column(
                'title', 
                sqlmodel.sql.sqltypes.AutoString(), 
                nullable=False
            ),
            sa.Column(
                'content', 
                sqlmodel.sql.sqltypes.AutoString(), 
                nullable=False
            ),
            sa.Column('author_id', sa.Uuid(), nullable=True),
            sa.ForeignKeyConstraint(['author_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    else:
        print("Books table already exists, skipping creation")
        
    print("Init migration completed successfully")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('books')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    
    # Don't drop the enum type as it might be used by other tables
    # If you want to drop it, uncomment the following:
    # conn = op.get_bind()
    # try:
    #     sa.Enum(name='accounttype').drop(conn)
    #     print("Dropped accounttype enum")
    # except Exception as e:
    #     print(f"Could not drop accounttype enum: {e}")
    # ### end Alembic commands ###
