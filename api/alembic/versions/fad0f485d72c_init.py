"""init 

Revision ID: fad0f485d72c
Revises: 048d629bc04f
Create Date: 2025-03-04 18:32:29.014177

"""
from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op


# revision identifiers, used by Alembic.
revision: str = 'fad0f485d72c'
down_revision: Union[str, None] = '048d629bc04f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if the "accounttype" enum type already exists before creating it
    conn = op.get_bind()
    
    # Check if the enum type already exists
    exists_query = """
    SELECT EXISTS (
        SELECT 1 FROM pg_type WHERE typname = 'accounttype'
    );
    """
    exists = conn.execute(sa.text(exists_query)).scalar()
    
    if not exists:
        # Create the enum type only if it doesn't exist
        sa.Enum('AUTHOR', 'READER', name='accounttype').create(conn)
        print("Created accounttype enum")
    else:
        print("Accounttype enum already exists, skipping creation")
    
    # Create tables
    op.create_table(
        'users',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column(
            'first_name', 
            sqlmodel.sql.sqltypes.AutoString(), 
            nullable=False
        ),
        sa.Column(
            'last_name', 
            sqlmodel.sql.sqltypes.AutoString(), 
            nullable=False
        ),
        sa.Column(
            'email', 
            sqlmodel.sql.sqltypes.AutoString(), 
            nullable=False
        ),
        sa.Column(
            'password', 
            sqlmodel.sql.sqltypes.AutoString(), 
            nullable=False
        ),
        sa.Column(
            'account_type', 
            sa.Enum('AUTHOR', 'READER', name='accounttype', create_type=False), 
            nullable=False
        ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table(
        'books',
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column(
            'title', 
            sqlmodel.sql.sqltypes.AutoString(), 
            nullable=False
        ),
        sa.Column(
            'content', 
            sqlmodel.sql.sqltypes.AutoString(), 
            nullable=False
        ),
        sa.Column('author_id', sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(['author_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('books')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    
    # Don't drop the enum type as it might be used by other tables
    # If you want to drop it, uncomment the following:
    # conn = op.get_bind()
    # try:
    #     sa.Enum(name='accounttype').drop(conn)
    #     print("Dropped accounttype enum")
    # except Exception as e:
    #     print(f"Could not drop accounttype enum: {e}")
    # ### end Alembic commands ###
